x-airflow-common:
  &airflow-common
  build:
    context: .
    dockerfile: Dockerfile-airflow
  env_file:
    - .env
  volumes:
    - ./dags:/opt/airflow/dags
    - ./utils:/opt/airflow/dags/utils
    - ./airflow_logs:/opt/airflow/logs
    - ./airflow_config:/opt/airflow/config
    - ./airflow_plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}"
  networks:
    - trading-network
  depends_on:
    &airflow-common-depends-on
    airflow-postgresql:
      condition: service_healthy

services:
  # Trading scraper services
  trading-postgresql:
    image: postgres:latest
    container_name: trading-postgresql
    environment:
      POSTGRES_USER: ${TRADING_POSTGRES_USER}
      POSTGRES_PASSWORD: ${TRADING_POSTGRES_PASSWORD}
      POSTGRES_PORT: ${TRADING_POSTGRES_PORT}
      POSTGRES_DB: ${TRADING_POSTGRES_DB}
    ports:
      - "${TRADING_POSTGRES_PORT}:5432"
    volumes:
      - ./postgresql:/var/lib/postgresql/data
    networks:
      - trading-network
    restart: unless-stopped
  trading-scraper:
    build:
      context: .
      dockerfile: Dockerfile-trading-scraper
    container_name: trading-scraper
    env_file:
      .env
    depends_on:
      - trading-postgresql
    networks:
      - trading-network
    restart: unless-stopped

  # Airflow services
  airflow-postgresql:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${AIRFLOW_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AIRFLOW_POSTGRES_PASSWORD}
      POSTGRES_PORT: ${AIRFLOW_POSTGRES_PORT}
      POSTGRES_DB: ${AIRFLOW_POSTGRES_DB}
    volumes:
      - ./airflow-postgresql:/var/lib/postgresql/data
    ports:
        - "${AIRFLOW_POSTGRES_PORT}:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8974/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: [ "CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"' ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    env_file:
      - .env
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources
  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    env_file:
      - .env
    command:
      - bash
      - -c
      - airflow
    networks:
      - trading-network

volumes:
    postgresql:
        driver: local
    airflow-postgresql:
        driver: local
networks:
    trading-network:
        driver: bridge